<?php

namespace Ephp\ACLBundle\Model;

use Doctrine\ORM\EntityRepository;

/**
 * BaseAccessLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseAccessLogRepository extends EntityRepository {

    const IP_STRICTED = 1;
    const IP_SHADER = 2;
    const IP_MULTI = 3;

    public function checkIp(BaseUser $user, $ip, $mode = null) {
        if (!$mode) {
            $mode = self::IP_MULTI;
        } elseif ($mode === true) {
            $mode = self::IP_STRICTED;
        } else {
            $_mode = 'IP_' . strtoupper($mode);
            switch ($_mode) {
                case 'IP_STRICTED':
                    $mode = self::IP_STRICTED;
                case 'IP_SHARED':
                    $mode = self::IP_SHADER;
                    break;
                case 'IP_MULTI':
                    $mode = self::IP_MULTI;
                    break;
                default:
                    throw new CheckIpException("Modalità {$mode} non riconosciuta (atteso: stricted, shared o multi)");
            }
        }
        $access = $this->findOneBy(array('user' => $user->getId(), 'ip' => $ip));
        if ($access) {
            switch ($mode) {
                case self::IP_STRICTED:
                    if (!$this->checkIpNoUser($user, $ip)) {
                        throw new CheckIpException("L'IP {$ip} è stato usato da un altro utente");
                    }
                    return true;
                case self::IP_SHADER:
                case self::IP_MULTI:
                    return true;
            }
        }
        if (!$access) {
            switch ($mode) {
                case self::IP_STRICTED:
                    $access = $this->findOneBy(array('user' => $user->getId()));
                    if (!is_null($access)) {
                        throw new CheckIpException("L'utente è legato ad un altro IP");
                    }
                    if (!$this->checkIpNoUser($user, $ip)) {
                        throw new CheckIpException("L'IP {$ip} è stato usato da un altro utente");
                    }
                    return true;
                case self::IP_SHADER:
                    $access = $this->findOneBy(array('user' => $user->getId()));
                    if (!is_null($access)) {
                        throw new CheckIpException("L'utente è legato ad n altro IP");
                    }
                    return true;
                case self::IP_MULTI:
                    return true;
            }
        }
    }

    private function checkIpNoUser(BaseUser $user, $ip) {
        $qb = $this->createQueryBuilder('a')
                ->where('a.ip = :ip')
                ->setParameter('ip', $ip)
                ->andWhere('a.user != :user')
                ->setParameter('user', $user->getId())
                ->setMaxResults(1);
        $access = $qb->getQuery()->getOneOrNullResult();
        return is_null($access);
    }

}
